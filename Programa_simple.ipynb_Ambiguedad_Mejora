def ordenar_lista_pares_impares():
    numeros = []  # Crear una lista vacía para almacenar los números ingresados
    limite = 9  # Establecer un límite de 9 números

    while len(numeros) < limite:  # Iniciar un bucle mientras no se haya alcanzado el límite
        try:
            numero = float(input(f"Ingrese el número {len(numeros) + 1}: "))  # Solicitar un número y convertirlo a punto flotante
            numeros.append(numero)  # Agregar el número a la lista
        except ValueError:  # Manejar errores si el usuario ingresa un valor no válido
            print("Debe ingresar un número válido.")

    # Separar números en pares e impares manteniendo la posición original
    numeros_pares = [numero for numero in numeros if numero % 2 == 0]
    numeros_impares = [numero for numero in numeros if numero % 2 != 0]

    # Ordenar las listas de números pares e impares por separado
    numeros_pares.sort()
    numeros_impares.sort()

    # Combinar las listas ordenadas de pares e impares manteniendo la posición original
    lista_final = []
    lista_final.extend(numeros_pares)  # Agregar números pares
    lista_final.extend(numeros_impares)  # Agregar números impares

    return lista_final  # Devolver la lista final ordenada

# Ejemplo de uso
lista_final = ordenar_lista_pares_impares()
print("Lista con números pares primero y luego los impares:", lista_final)

### . La ambigüedad que podría surgir está relacionada con la entrada del usuario, la ordenación de números idénticos y la combinación de números pares e impares con valores iguales.

####### 1.	Ambigüedad en la Entrada del Usuario: El código puede enfrentar ambigüedad si el usuario ingresa números de punto flotante con formatos diferentes o caracteres no numéricos. 
###El código intenta manejar esto al verificar si la entrada del usuario es un número válido y mostrar un mensaje de error en caso contrario.
###2.	Interpretación de la Ordenación: En el proceso de ordenación, si los números en la lista contienen valores idénticos, el código no especifica un criterio de ordenación adicional
### para manejar esta ambigüedad. Por lo tanto, los números iguales se ordenarán en función de su orden original en la lista.
###3.	Ambigüedad en la Combinación de Números Pares e Impares: El código ordena y combina los números pares e impares, pero si dos números pares o dos números impares son iguales, 
###78podría haber ambigüedad en la forma en que se organizan en la lista final.

##############
#### Para mejorar el manejo de la ambigüedad en el código y abordar situaciones ambiguas, una alternativa sería permitir al usuario especificar un criterio de ordenación adicional
### o un identificador único para los números en caso de que se encuentren números idénticos. Esto podría lograrse mediante un argumento adicional en la función, 
#### que permita al usuario definir cómo desea que se resuelva la ambigüedad
